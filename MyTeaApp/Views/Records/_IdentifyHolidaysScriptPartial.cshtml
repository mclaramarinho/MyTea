﻿@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

﻿<script>
     const holidays = [
         new Date(2024, 0, 1), // Confraternização Universal (feriado nacional)
         new Date(2024, 1, 12), // Carnaval (ponto facultativo)
         new Date(2024, 1, 13), // Carnaval (ponto facultativo)
         new Date(2024, 1, 14), // Carnaval (ponto facultativo até as 14h)
         new Date(2024, 2, 29), // Paixão de Cristo (feriado nacional)
         new Date(2024, 3, 21), // Tirandentes (feriado nacional)
         new Date(2024, 4, 1), // Dia Mundial do Trabalho (feriado nacional)
         new Date(2024, 4, 30), // Corpus Christi (ponto facultativo)
         new Date(2024, 8, 7), // Independência do Brasil (feriado nacional)
         new Date(2024, 9, 12), // Nossa Senhora Aparecida (feriado nacional)
         new Date(2024, 9, 28), // Dia do Servidor Público federal (ponto facultativo)
         new Date(2024, 10, 2), // Finados (feriado nacional)
         new Date(2024, 10, 15), // Proclamação da República (feriado nacional)
         new Date(2024, 10, 20), // Dia Nacional de Zumbi e da Consciência Negra (feriado nacional)
         new Date(2024, 11, 24), // Véspera do Natal (ponto facultativo após as 14h)
         new Date(2024, 11, 25), // Natal (feriado nacional)
         new Date(2024, 11, 31) // Véspera do Ano Novo (ponto facultativo após as 14h)
     ];

     /**
      * description - Checks if the selected fortnight has any holidays
      * returns - Array of integers populated with the indexes of the dates (0-14) that are considered holidays.
      */

     // MOD -- dinamically gets the days of the fortnight
     async function hasHolidayInFortnight(date, daysInFortnight) {
         return new Promise((res, rej) => {
             let fortnightHolidays = [];

             let fortnightDates = [];

             for (let i = 0; i < daysInFortnight; i++) {
                 const tempDate = new Date(date);
                 tempDate.setDate(tempDate.getDate() + i);
                 fortnightDates.push(tempDate);
             }

             fortnightDates.map((d, index) => {
                 holidays.map(h => {
                     if (h.getDate() == d.getDate() && h.getMonth() == d.getMonth()) {
                         fortnightHolidays.push(index);
                         return;
                     }
                 })
             })

             res(fortnightHolidays);
         })
     }

     /**
      * description - Removes attributes (disabled and value) from holiday slots
      */
     // MOD -- dinamically gets the days of the fortnight

     function resetHolidaySlots(daysInFortnight) {
         for (let i = 0; i < (4 * (daysInFortnight-1)); i++) {
             const slotEl = document.querySelector(`#fractionSlot_${i}>input`);
             slotEl.classList.remove("weekend")
             if (slotEl.classList.contains("holidaySlot")) {
                slotEl.classList.remove("holidaySlot");
                slotEl.removeAttribute("disabled");
                slotEl.removeAttribute("value");
             }
         }
     }


     function markHolidaySlots(index, daysInFortnight, isWeekend = false, isHoliday = false) {
         // MOD -- dinamically gets the days of the fortnight

         const slotsValues = getSlotValues(index, daysInFortnight);

         slotsValues.forEach((v, i) => {
             const slotEl = document.querySelector(`#fractionSlot_${v} > input`);

             if (isHoliday && i === slotsValues.length - 1) {
                 slotEl.setAttribute("value", 8);
                 slotEl.setAttribute("readonly", true);
                 slotEl.classList.add("holidaySlot");
             } else if (isWeekend) {
                 slotEl.classList.add("holidaySlot", "weekend");
             } else {
                 slotEl.readonly = false;
             }
         });
         updateTotals();
     }

     // =========================================

     function isWeekend(date) {
         const day = date.getDay(); // 0 (domingo) a 6 (sábado)
         return day === 0 || day === 6; // Retorna true se for fim de semana
     }
     // MOD -- dinamically gets the days of the fortnight
     function getSlotValues(index, daysInFortnight) {
         return [
             index,
             index + daysInFortnight,
             index + (daysInFortnight * 2),
             index + (daysInFortnight * 3),
         ];
     }

</script>