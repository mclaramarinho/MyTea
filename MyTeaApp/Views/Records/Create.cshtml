@using MyTeaApp.Models.ViewModels;
@using Microsoft.AspNetCore.Http;
@using MyTeaApp.Data;
@inject ApplicationDbContext _db;
@inject IHttpContextAccessor _httpContextAccessor;
@model RecordVM;

@{
    ViewData["Title"] = "Create Record";
    var _http = _httpContextAccessor.HttpContext;

    string? urlStartDate = _http.Request.Query["startDate"];

    DateTime fortNight = DateTime.Now;

    if (urlStartDate != null)
    {
        fortNight = DateTime.ParseExact(urlStartDate.Substring(0, 19), "yyyy-MM-ddTHH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
    }
    int firstDayOfFortnight = 1;
    if (fortNight.Day > 15)
    {
        firstDayOfFortnight = 16;
    }

    DateTime fortnightStart = new DateTime(fortNight.Year, fortNight.Month, firstDayOfFortnight);
    var fortnights = new List<SelectListItem>();

    var currentYear = DateTime.Now.Year;

    for (int i = 1; i <= 12; i++)
    {
        int first = 1;
        int second = 16;

        // first fortnight
        DateTime startDate = new DateTime(currentYear, i, first);
        DateTime endDate = startDate.AddDays(14);
        bool isSelected = (startDate.Day == fortnightStart.Day && startDate.Month == fortnightStart.Month && startDate.Year == fortnightStart.Year);

        fortnights.Add(new SelectListItem
                {
                    Value = $"{startDate:yyyy-MM-dd}",
                    Text = $"{startDate:dd/MM/yyyy} - {endDate:dd/MM/yyyy}",
                    Selected = isSelected
                });

        // second fortnight
        int daysInSecondFortnight = 1;
        DateTime tempDate = new DateTime(currentYear, i, second);
        do
        {
            tempDate = tempDate.AddDays(1);
            if (tempDate.Month == i)
            {
                daysInSecondFortnight++;
            }
        } while (tempDate.Month == i);

        startDate = new DateTime(currentYear, i, second);
        endDate = startDate.AddDays(daysInSecondFortnight);
        isSelected = (startDate.Day == fortnightStart.Day && startDate.Month == fortnightStart.Month && startDate.Year == fortnightStart.Year);

        fortnights.Add(new SelectListItem
                {
                    Value = $"{startDate:yyyy-MM-dd}",
                    Text = $"{startDate:dd/MM/yyyy} - {endDate:dd/MM/yyyy}",
                    Selected = isSelected
                });

    }
}

@* - IF RECORD NOT NULL SHOW FIELDS FILLED WITH DB DATA *@

<partial name="_AlertMessagePartial"></partial>


@* - SHOW IF EXISTING RECORD IS NULL *@
    <div class="col flex-wrap text-wrap table-responsive">
        <h1>Create Record</h1>

        <h4>Record</h4>
        @* <hr /> *@
        <div class="row">
            <div class="col">
                <div class="form-group">
                    <label for="quinzenaSelector">Select Fortnight</label>
                    <select id="quinzenaSelector" class="form-control">
                    @foreach (var quinzena in fortnights)
                        {
                            <option value="@quinzena.Value" selected="@quinzena.Selected">@quinzena.Text</option>
                        }
                    </select>
                </div>
                <form asp-action="Create" method="post" id="registerRecordForm">
                    <div id="records-list" class="">
                        <table id="records-table" class="table">
                            <thead>
                                <tr>
                                    <th class="text-nowrap">Charge Codes</th>
                                    @for (int i = 0; i < 15; i++)
                                    {
                                        <th class="date-column text-center"></th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < 4; i++)
                                {
                                    <tr class="grid">
                                        <td class="g-col-auto">
                                            <div>
                                            <select class="form-select wbsSelector" asp-items="Model.WBS" name="wbs" id="wbsSelector"></select>

                                            </div>
                                        </td>
                                        @for (int j = 0; j < 15; j++)
                                        {
                                            <td class="g-col-1" id="fractionSlot_@((i * 15) + j)">

                                                <input name="hours" type="number"  id="RecordFraction_@(i)_@(j)" value="" min="0" max="24" style="max-width: 40px;" />

                                                <input name="dates" type="hidden" />

                                            </td>
                                        }
                                        <td class="g-col-1">
                                        <input id="rowTotal_@i" type="number" class="row-total" disabled style="max-width: 40px;" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <th>Total</th>
                                @for (int i = 0; i < 15; i++)
                                {
                                    <td class="col-total">
                                        <input id="colTotal_@i" type="number" class="col-total" disabled style="max-width: 40px;" />
                                    </td>
                                }
                                <td class="col-total">
                            <input type="number" id="result" disabled class="" style="max-width: 40px;" />
                                </td>

                            </tfoot>
                        </table>
                    </div>
                    <input type="submit" value="Create" class="btn btn-primary" id="submitRecord_btn" />
                </form>
            </div>
        </div>

        <div>
            <a asp-action="Index">Back to List</a>
        </div>
    </div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        await Html.RenderPartialAsync("_CalcInputScriptsPartial");
        await Html.RenderPartialAsync("_IdentifyHolidaysScriptPartial");
        await Html.RenderPartialAsync("_FractionSlotScriptsPartial");
        await Html.RenderPartialAsync("_PopulateWithDbScriptsPartial", Model);
        await Html.RenderPartialAsync("_FormValidationPartial");
        
    }
    <script>
        const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        document.addEventListener('DOMContentLoaded', async function () {
            let shouldSlotsBeEnabled = false;

            if(@Json.Serialize(Model.ExistingRecord != null)){
                populateTableWithData();
                shouldSlotsBeEnabled = false;
            }else{
                shouldSlotsBeEnabled = true;
            }

          
            document.querySelectorAll(".wbsSelector").forEach(i => { 
                i.addEventListener("change", e => {
                    isSlotEnabled(shouldSlotsBeEnabled);
                })
            })

            

            await identifyFortnightAndGenerateTable();
            isSlotEnabled(shouldSlotsBeEnabled); 

            const inputElements = document.querySelectorAll('input[id^="RecordFraction"]');

            inputElements.forEach(input => {
                const [base, rowIndex, colIndex] = input.getAttribute('id').split("_");

                input.addEventListener('input', event => handleInput(event, rowIndex, colIndex));
            });

            /**
             * description - when no other input (except by holidays) is provided, submitting will update the total hours
             *  
             */
            $("#submitRecord_btn").on("mouseup", (e) => {
                inputElements.forEach(input => {
                    const [base, rowIndex, colIndex] = input.getAttribute('id').split("_");
                    handleInput(event, rowIndex, colIndex)
                    document.getElementById("registerRecordForm").onsubmit = (ev) => {
                        validateForm(ev);    
                    }
                });
            })
            
            quinzenaSelector.addEventListener('change', async function () {
                var selectedDate = new Date(this.value);

                window.location.href = "/Records/Create?startDate=" + selectedDate.toISOString();
            });
           
        });
    </script>
}