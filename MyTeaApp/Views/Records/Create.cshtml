@using Microsoft.AspNetCore.Identity;
    @using MyTeaApp.Models.ViewModels;
    @using Microsoft.AspNetCore.Http;
    @using MyTeaApp.Data;
@using MyTeaApp.Views.Records
    @inject ApplicationDbContext _db;
    @inject SignInManager<User> _sm;
    @inject UserManager<User> _um;
    @inject IHttpContextAccessor _httpContextAccessor;
    @model RecordVM;


@{
    ViewData["Title"] = "Create Record";

    // int daysInSelectedFortnight = 15;

    var _http = _httpContextAccessor.HttpContext;

    string? urlStartDate = _http.Request.Query["startDate"];

    FortnightData data = new(urlStartDate);
}

@* - IF RECORD NOT NULL SHOW FIELDS FILLED WITH DB DATA *@

<partial name="_AlertMessagePartial"></partial>


@* - SHOW IF EXISTING RECORD IS NULL *@
<div class="col flex-wrap text-wrap table-responsive">
    <h1 class="title">Record</h1>
    <div class="d-flex justify-content-end w-100">
        <div class="form-group ms-1 col-3">
            <label for="quinzenaSelector">Select Fortnight</label>
            <select id="quinzenaSelector" class="form-control">
                @foreach (var quinzena in data.Fortnights)
                {
                    <option value="@quinzena.Value" selected="@quinzena.Selected">@quinzena.Text</option>
                }
            </select>

        </div>
        <div class="mt-4 container-fluid d-flex justify-content-end">

            @if (Model.ExistingRecord != null)
            {
                <button class="btn btn-primary edit-button" disabled><i class="bi bi-pencil-square"></i></button>
                <form asp-action="Delete" asp-controller="Records" class="ms-3" asp-route-id="@Model.ExistingRecord.RecordID"
                      asp-route-startDate="@data.SelectedFortnight.ToString("yyyy-MM-dd")" asp-route-userId="@ViewData["userSelected"]"
                      asp-route-daysInFortnight="@data.DaysInSelectedFortnight" asp-route-email="@Model.user" asp-route-vm="@Model">
                    <button type="submit" class="btn btn-danger"><i class="bi bi-trash"></i></button>
                </form>
            }

        </div>
    </div>

    <div class="row  table-responsive">
        <div class="col">

            <form asp-action="Create" method="post" id="registerRecordForm">
                <input type="hidden" name="isInEditMode" id="isInEditModeInput" value="false" />
                <input type="hidden" name="rid" value="@(Model.ExistingRecord != null ? Model.ExistingRecord.RecordID : null)" />
                <div id="records-list" class="">
                    <table id="records-table" class="table">
                        <thead>
                            <tr>
                                <th class="text-nowrap">Charge Codes</th>
                                @for (int i = 0; i < data.DaysInSelectedFortnight; i++)
                                {
                                    <th class="date-column text-center"></th>
                                }
                                <th>Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < 4; i++)
                            {
                                <tr class="grid">
                                    <td class="g-col-auto">
                                        <div>
                                            <select class="form-select wbsSelector" asp-items="Model.WBS" name="wbs" id="wbsSelector_@i"></select>

                                        </div>
                                    </td>
                                    @for (int j = 0; j < data.DaysInSelectedFortnight; j++)
                                    {

                                        <td class="g-col-1" id="fractionSlot_@((i * data.DaysInSelectedFortnight) + j)">

                                            <input name="hours" type="number" id="RecordFraction_@(i)_@(j)" value="" min="0" max="24" style="max-width: 40px;" />

                                            <input name="dates" type="hidden" />

                                        </td>
                                    }
                                    <td class="g-col-1">

                                        <input id="rowTotal_@i" type="number" class="row-total" disabled style="max-width: 48px;" />
                                    </td>
                                </tr>
                            }
                            <input name="email" type="hidden" value="@Model.user" />
                        </tbody>
                        <tfoot>
                        <th>Total</th>
                            @for (int i = 0; i < data.DaysInSelectedFortnight; i++)
                            {
                            <td class="col-total">
                                <input id="colTotal_@i" type="number" class="col-total" disabled style="max-width: 40px;" />
                                <input id="colTotal_date__@i" type="hidden" />
                            </td>
                            }
                        <td class="col-total">
                            <input type="number" id="result" disabled class="" style="max-width: 48px;" />
                        </td>
                        </tfoot>
                    </table>
                </div>

                @* esse botão submit precisa estar dentro desse form *@
                <input type="submit" value="Save" class="btn btn-primary submit-button" id="submitRecord_btn" />
            </form>
        </div>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        await Html.RenderPartialAsync("_CalcInputScriptsPartial");
        await Html.RenderPartialAsync("_IdentifyHolidaysScriptPartial");
        await Html.RenderPartialAsync("_FractionSlotScriptsPartial");
        await Html.RenderPartialAsync("_PopulateWithDbScriptsPartial", Model);
        await Html.RenderPartialAsync("_FormValidationPartial");

    }
    <script>
        const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        // YAS
        const editButton = document.querySelector('.edit-button');
        const submitButton = document.querySelector('.submit-button');
        // YAS
        const submitBtn = document.querySelector("#submitRecord_btn");



        let editModeInput = document.getElementById('isInEditModeInput');
        document.addEventListener('DOMContentLoaded', async function () {
            let userToView = @(Json.Serialize(ViewData["userSelected"]));
            let shouldSlotsBeEnabled = false;



            // YAS
            const inputElements = document.querySelectorAll('input[id^="RecordFraction"]');

            let accessDate = new Date();
            let fortnights = @Json.Serialize(data.Fortnights);
            let selectedFortnight = null;

            fortnights.forEach((item) => {
                if (item.selected) {
                    selectedFortnight = item;
                }
            });

            // YAS


            // MOD -- added these lines to keep track of the amount of days in fortnight
            const startDate = getFortnightStartDate();
            const daysInFortnight = getDaysInFortnight(startDate);

            await identifyFortnightAndGenerateTable(startDate, daysInFortnight);
            if (@Json.Serialize(Model.ExistingRecord != null)) {
                submitBtn.setAttribute("disabled", true);
                populateTableWithData();
                shouldSlotsBeEnabled = false;
            } else {
                submitBtn.removeAttribute("disabled");
                shouldSlotsBeEnabled = true;
            }

            isSlotEnabled(shouldSlotsBeEnabled, daysInFortnight);



            // YAS
        @{
            var adminRole = User.IsInRole("Admin") ? "true" : "false";
        }


                                                                                                            const selectedStartDate = new Date(selectedFortnight.value);
            let endDate;


            const isTodayInSelectedFortnight = () => {

                const selectedFortnightFirstDay = new Date(@Json.Serialize(data.FortnightStart));
                console.log(selectedFortnightFirstDay)
                const [fy, fm, fd] = selectedFortnightFirstDay.toISOString().split("T")[0].split("-");


                const daysInSelectedFortnight = @Json.Serialize(data.DaysInSelectedFortnight);
                console.log(daysInSelectedFortnight)

                const selectedFortnightLastDay = selectedFortnightFirstDay;
                selectedFortnightLastDay.setDate(selectedFortnightLastDay.getDate() + daysInSelectedFortnight);
                console.log(selectedFortnightLastDay)
                const [ly, lm, ld] = selectedFortnightFirstDay.toISOString().split("T")[0].split("-");

                const today = new Date();
                const [ty, tm, td] = today.toISOString().split("T")[0].split("-");

                let response = false;

                console.log(`dates (f - l - t): ${fd} - ${ld} - ${td}`)
                console.log(`months (f - l - t): ${fm} - ${lm} - ${tm}`)
                console.log(`years (f - l - t): ${fy} - ${ly} - ${ty}`)

                if (ty === ly && ty === fy) {
                    console.log(1)
                    if (tm === lm && tm === fm) {
                        console.log(2)
                        if (td <= ld && td >= fd) {
                            console.log(3)
                            response = true;
                        }
                    }
                }

                return response;
            }



            if (isTodayInSelectedFortnight() || @adminRole === "true") {
                editButton.removeAttribute('disabled');

            } else {
                editButton.setAttribute('disabled', true);
                submitButton.setAttribute('disabled', true);
            }



            let wbsList = document.querySelectorAll(".wbsSelector");
            function toggleSelects() {
                wbsList.forEach(wbs => {
                    if (wbs.hasAttribute('disabled')) {
                        wbs.removeAttribute('disabled');
                    } else {
                        wbs.setAttribute('disabled', true);
                    }
                });
            }

            function toggleInputs() {
                inputElements.forEach(input => {
                    if (input.hasAttribute('disabled')) {
                        input.removeAttribute('disabled');
                    } else {
                        input.setAttribute('disabled', true);
                    }
                });
            }

            editButton.addEventListener('mouseup', function (event) {
                event.preventDefault();

                submitBtn.removeAttribute("disabled");
                console.log("Value: " + editModeInput.value)
                if (editModeInput.value === true) {
                    editModeInput.value = false;
                } else {
                    editModeInput.value = true;

                }

                toggleInputs();
                toggleSelects();
                shouldSlotsBeEnabled = editModeInput.value;
            });

            // YAS





            /* EVENT LISTENERS */

            // const inputElements = document.querySelectorAll('input[id^="RecordFraction"]');

            inputElements.forEach(input => {
                const [base, rowIndex, colIndex] = input.getAttribute('id').split("_");

                input.addEventListener('input', event => handleInput(event, rowIndex, colIndex));
            });





            quinzenaSelector.addEventListener('change', async function () {
                var selectedDate = new Date(this.value).toISOString().split("T")[0];
                let newLocation = `/Records/Create?`;
                // let newLocation = `/Records/Create?startDate=${selectedDate}`;
                if (userToView !== null) {
                    newLocation += `uid=${userToView}&startDate=${selectedDate}`;
                } else {
                    newLocation += `startDate=${selectedDate}`;
                }
                window.location.href = newLocation;
            });

            /**
             * description - when no other input (except by holidays) is provided, submitting will update the total hours
             *
             */
            $("#submitRecord_btn").on("mouseup", (e) => {
                inputElements.forEach(input => {
                    const [base, rowIndex, colIndex] = input.getAttribute('id').split("_");
                    handleInput(event, rowIndex, colIndex)
                    document.getElementById("registerRecordForm").onsubmit = (ev) => {
                        validateForm(ev);
                    }
                });
            })


            document.querySelectorAll(".wbsSelector").forEach(i => {
                i.addEventListener("change", e => {
                    isSlotEnabled(shouldSlotsBeEnabled, daysInFortnight);
                })
            })
        });
    </script>

}
<style>
    .title {
        font-weight: bold;
        color: #0097B2 !important;
    }

    .edit-button, .submit-button {
        background-color: #0097B2 !important;
        border-color: #0097B2 !important;
        transition: 0.6s;
    }

        .edit-button:hover, .submit-button:hover {
            background-color: #05b0cf !important;
            border-color: #05b0cf !important;
        }
</style>